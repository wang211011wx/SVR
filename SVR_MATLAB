clear
close all
clc
% 限制为单线程以避免并行计算的影响
% maxNumCompThreads(1);
tic;
% % 测量CPU处理时间
% t1=clock;
% cpu_start = cputime;
[memoryBefore, system] = memory;
fprintf('Memory before execution:\n');
disp(memoryBefore);
res=xlsread('a0-仿真.xlsx');
a11=res(2:169,9:10)';
a1=a11;
b1=res(2:169,14)';

w = randperm(size(a1,2));
p_train = a1(:,w(2:140))';
t_train = b1(:,w(2:140))';

p_test = a1(:,w(100:end))';
t_test = b1(:,w(100:end))';
% A0=out.A.signals.values(end);
% B0=out.A1.signals.values(end);
% C=[A0 B0];
% 
% p_test=[p_test1;C];
% t_test=[t_test1;62];
[pn_train,inputps] = mapminmax(p_train');
pn_train = pn_train';
pn_test = mapminmax('apply',p_test',inputps);
pn_test = pn_test';
[tn_train,outputps] = mapminmax(t_train');
tn_train = tn_train';
tn_test = mapminmax('apply',t_test',outputps);
tn_test = tn_test';
[c,g] = meshgrid(0:1:10,-1:0.1:5);
[m,n] = size(c);
cg = zeros(m,n);  
eps = 10^(-4);
v = 5;
bestc = 0;
bestg = 0;
error = Inf;
for i = 1:m
    for j = 1:n
        cmd = ['-v ',num2str(v),' -t 2 ',' -c ',num2str(2^c(i,j)),' -g ',num2str(2^g(i,j) ),' -s 3 -p 0.01'];
        cg(i,j) = svmtrain(tn_train,pn_train,cmd);
        if cg(i,j) < error
            error = cg(i,j);
            bestc = 2^c(i,j);
            bestg = 2^g(i,j);
        end
        if abs(cg(i,j) - error) <= eps && bestc > 2^c(i,j)
            error = cg(i,j);
            bestc = 2^c(i,j);
            bestg = 2^g(i,j);
        end
    end
end
cmd = [' -t 2',' -c ',num2str(bestc),' -g ',num2str(bestg),' -s 3 -p 0.01'];
model = svmtrain(tn_train,pn_train,cmd);
[Predict_1,error_1,decision_values1] = svmpredict(tn_train,pn_train,model);
[Predict_2,error_2,decision_values2] = svmpredict(tn_test,pn_test,model);
predict_1 = mapminmax('reverse',Predict_1,outputps);
predict_2 = mapminmax('reverse',Predict_2,outputps);
result_1 = [t_train predict_1];
result_2 = [t_test predict_2];
MSE1=mean((t_train-predict_1).^2);
R21=1-sum((t_train-predict_1).^2)/sum((mean(t_train)-t_train).^2);
MSE2=mean((t_test-predict_2).^2);
R22=1-sum((t_test-predict_2).^2)/sum((mean(t_test)-t_test).^2);
error=(predict_2 - t_test)./t_test*100;
figure(1);
plot(1:length(t_train),t_train,'r-*',1:length(t_train),predict_1,'b:o')
grid on
legend('Measurement results','Identification results','fontsize',9)
xlabel('Sample number') 
ylabel('M / uH')
%string_1 = {'SVR训练值和真实值的对比';
%          ['mse = ' num2str(MSE1) ' R^2 = ' num2str(R21)]};

%title(string_1)
figure(2);
% subplot(2,1,1);  
plot(1:length(t_test),t_test,'-*b',1:length(t_test),predict_2,':or','LineWidth',1,'MarkerSize',7)
hold on;
legend('Model calculation results','Model verification results', 'Interpreter', 'latex' ,'fontsize',11);
xlabel('Sample points', 'Interpreter', 'latex','fontsize',12); 
ylabel('Mutual inductance/$\mu$H', 'Interpreter', 'latex', 'FontSize', 12);
%string_2 = {'SVR测试集预测结果对比';
 %          ['mse = ' num2str(MSE2) ' R^2 = ' num2str(R22)]};
%title(string_2)
% figure(3);
figure(3);
plot(error,'-*r','LineWidth',1,'MarkerSize',7);
%title('SVR预测互感值误差','fontsize',10)  
ylabel('Error/ \%','FontSize',12,'Interpreter','latex');
xlabel('Sample points','Interpreter', 'latex','fontsize',12); 
ylim auto
% disp(['C=',num2str(bestc)])
% disp(['g=',num2str(bestg)])
% disp(['MSE1=',num2str(MSE1)])
% disp(['R^21=',num2str(R21)])
% disp(['MSE2=',num2str(MSE2)])
% disp(['R^22=',num2str(R22)])

[memoryAfter, system] = memory;
fprintf('Memory after execution:\n');
disp(memoryAfter);

% 计算程序执行过程中使用的内存
memoryUsage = memoryAfter.MemUsedMATLAB - memoryBefore.MemUsedMATLAB;
fprintf('Memory used by the program: %d bytes\n', memoryUsage);
fprintf('Memory used by the program: %d MB\n', memoryUsage/1048576);

% cpu_end = cputime;
% cpu_time_used = cpu_end - cpu_start;
% t2=clock;
% etime=t2(6)-t1(6);
 elapsed_time = toc;
fprintf('Program execution time: %.2f 秒\n', elapsed_time);
